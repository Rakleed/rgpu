    2УПРАЖНЕНИЕ 2.
    2АСИМПТОТИЧЕСКОЕ ПОВЕДЕНИЕ ПОСЛЕДОВАТЕЛЬНОСТЕЙ (функций натураль-
 2ного аргумента)

 ш1.0
                     1Что такое "полчаса", Волкодав не имел ни малей-
                     1шего представления.  У него дома время измеряли
                     1в нитках, выпрядаемых опытной мастерицей. Оста-
                     1валось предположить,  что Тилорн обозначал этим
                     1словом хоть какую-то протяжённость. 0
                                                1М.Семёнова. Волкодав
 ш1.2

                  2ОБЯЗАТЕЛЬНЫЕ РЕЗУЛЬТАТЫ ОБУЧЕНИЯ
    _ 1Основные понятия . 0:
 ш1.0
    1- 0  7O 2- 0,  7o 3- 0,  7W 2- 0,  7w 2- 0,  7Q 1-обозначения 0;
    1- свойства асимптотических обозначений 0;
    1- шкала роста числовых 0  1последовательностей 0;
    1- 0  1основные классы эффективности алгоритмов 0.

 ш1.2
    _ 1Уметь . 0:
 ш1.0
   - вычислять пределы последовательностей;
   - интерпретировать понятие  1"сложность алгоритмов" 0.
 ш1.2

                       2ТЕОРЕТИЧЕСКИЕ СВЕДЕНИЯ
   Основной целью  является  изложение техники оперирования с  1диск-
 1ретными 0 математическими объектами, аналогичную технике оперирования
с  1непрерывными 0 математическими объектами.
   Дело в том,  что частным случаем  1предела функции 0 (конечного  или
бесконечного) является  1предел последовательности 0 (конечный или бес-
конечный).
   Действительно, последовательность  x 4n 7е ═R 0,  n=0,1,2,...,  является
функцией, определённой на множестве натуральных чисел
 ш1.0

   f: ═N 0─ 76 ═R 0,

 ш1.2
причём f(n)=x 4n 0, n=0,1,2,...
    2Теорема 0.
 ш1.1
   Если функция f(x),  определённая на 1 7, 0x<+ 7$ 0,  является бесконечно
малой (большой),  то  числовая  последовательность  {f(n)} является
бесконечно малой (большой).

 ш1.2
    2Доказательство 0. Сравните два определения:
 ш1.0

   ( 7Аe 0>0)( 7Э 0N( 7e 0)) n>N 76 0│a 4n 0│< 7e 0,

   ( 7Аe 0>0)( 7Э 0x 40 0( 7e 0)) x>x 40 76 0│f(x)│< 7e 0.

 ш1.2
    1Теорема доказана 0.
   Если назвать  _ 1вариантой . 0 (по [Фихтенгольц,1970,с.44]) функцию  на-
турального аргумента, то можно говорить, что "предел  варианты f(n)
при n 76$ 0 является  1частным случаем 0 предела функции f(x) при x 76$ 0".

                     2Асимптотические обозначения

 ш1.0
                            1Асимптотически лучшие алгоритмы зачастую
                            1оказываются наихудшим решением для  всех
                            1задач, к которым они применимы. 0
                                              1Д.Кантор, Г.Зэссенхаус
 ш1.2

   Пусть f(n) и g(n) -  1неотрицательные 0 функции, определённые на мно-
жестве натуральных чисел.
                          21. 0  7O 2- 3обозначение
    2Определение 0  21 0 (по [Левитин,2006,с.88]).
 ш1.1
   Говорят, что  _ 1функция . 0  1f 0(n)  _ 1принадлежит множеству . 0  7O 0( 1g 0(n)), что за-
писывается как
 ш1.0

   f(n) 7еO 0(g(n))

 ш1.1
и обозначается f(n)= 7O 0(g(n)),  если  1существует 0 константа C>0 и целое
число n 40 0>0 такое,  что для всех n 7. 0n 40 0 выполняется f(n) 7, 0C 77 0g(n),  т.е.
если для всех значений n 7. 0n 40 0 функция f(n) ограничена  _ 1сверху . 0  некото-
рой константой, умноженной на значение функции g(n).

 ш1.2
   Класс функций 7 O 0(g) содержит все функции, которые  _ 1растут не быст-
 _ 1рее функции . 0 g, образующей верхнюю границу для класса  7O 0(g).
    2Определение 0  21 0'.
 ш1.0
        4┌ 0─────────────────────────────────────────── 4┐
       │                           4┌ 0                4┐ 0│
    2(1) 0 │f 7еO 0(g)  756 0 ( 7Э 0c>0) 7Э 0x 40 0( 7А 0x 7. 0x 40 0)││f(x)│ 7, 0c 77 0│g(x)│││.
       │                           4└ 0                4┘ 0│
        4└ 0─────────────────────────────────────────── 4┘
               7( 0                                     7)
    2(2) 0  7O 0(g)  ═+ 0  7* 0f│ ( 7Э 0c>0) 7Э 0x 40 0( 7А 0x 7. 0x 40 0)─ 76 0│f(x)│ 7, 0c 77 0│g(x)│ 78 0.
               79 0                                     70

 ш1.2
   Этот класс функций очень важен.
   В самом  деле,  пусть даны два алгоритма,  решающие одну и ту же
задачу,  и нас интересует,  принадлежит ли сложность первого из них
классу  7O 0 от сложности второго.  Если это так, то второй алгоритм не
лучше первого решает поставленную задачу.
    3Замечание 0.
 ш1.1
    7O 0-символика позволяет использовать как синонимы следующие слово-
сочетания:
   - "трудоёмкость (сложность) алгоритма составляет  7O 0(f(n))";
   - "решение задачи требует порядка  7O 0(f(n))";
   - "алгоритм позволяет решить задачу за время  7O 0(f(n))".

 ш1.2
                          22. 0  7o 3-обозначение
    2Определение 0  22 0 (по [Миллер,Боксер,2006,с.13-14]).
 ш1.1
   Говорят, что  _ 1функция . 0  1f 0(n)  _ 1принадлежит множеству . 0  7o 0( 1g 0(n)), что за-
писывается как
 ш1.0

   f(n) 7еo 0(g(n))

 ш1.1
и обозначается f(n)= 7o 0(g(n)), если  1для любой 0 константы C>0 существу-
ет целое  число  n 40 0>0  такое,  что  для   всех   n 7. 0n 40 0   выполняется
f(n)<C 77 0g(n), т.е.  если для всех значений n 7. 0n 40 0 функция f(n) ограни-
чена  _ 1строго сверху . 0 результатом умножения  любой  константы  C>0  на
значение g(n).

 ш1.2
    2Определение 0  22 0'.
 ш1.0

    4┌ 0─────────────────────────────────────────── 4┐
   │                           4┌ 0                4┐ 0│
   │f 7еo 0(g)  756 0 ( 7А 0c>0) 7Э 0x 40 0( 7А 0x 7. 0x 40 0)││f(x)│ 7, 0c 77 0│g(x)│││.
   │                           4└ 0                4┘ 0│
    4└ 0─────────────────────────────────────────── 4┘

 ш1.2
                          23. 0  7W 2- 3обозначение
    2Определение 0  23 0 [Левитин,2006,с.89].
 ш1.1
   Говорят, что  _ 1функция . 0  1f 0(n)  _ 1принадлежит множеству . 0  7W 0( 1g 0(n)), что за-
писывается как
 ш1.0

   f(n) 7еW 0(g(n))

 ш1.1
и обозначается f(n)= 7W 0(g(n)),  если  1существует 0 константа C>0 и целое
число n 40 0>0 такое,  что для всех n 7. 0n 40 0 выполняется f(n) 7. 0C 77 0g(n),  т.е.
если для всех значений n 7. 0n 40 0 функция f(n)  _ 1ограничена снизу . 0 некоторой
константой, умноженной на значение функции g(n).

 ш1.2
    2Определение 0  23 0'.
 ш1.0

    4┌ 0─────────────────────────────────────────── 4┐
   │                           4┌ 0                4┐ 0│
   │f 7еW 0(g)  756 0 ( 7Э 0c>0) 7Э 0x 40 0( 7А 0x 7. 0x 40 0)││f(x)│ 7. 0c 77 0│g(x)│││.
   │                           4└ 0                4┘ 0│
    4└ 0─────────────────────────────────────────── 4┘

 ш1.2
   Таким образом,  7W 0(g) - это класс функций, растущих по крайней ме-
ре так же быстро,  как функция g. Можно считать, что класс  7W 0(g) за-
даётся указанием своей нижней границы:  все функции из этого класса
растут по крайней мере так же быстро, как функция g.
   Если мы исследуем эффективность алгоритмов, то класс  7W 0(g) не бу-
дет представлять интерес (так,  например,  в класс  7W 0(n 52 0) входят все
функции, растущие быстрее, чем n 52 0, т.е. n 53 0, 2 5n 0, n! и т.п.).
    3Замечание 0 ( 1важное 0).
 ш1.1
   Оценки  7O 0 и  7W 0 используются, когда асимптотическое поведение функ-
ции известно недостаточно точно.

 ш1.2
                          24. 0  7w 2- 3обозначение
    2Определение 0  24 0 (по [Миллер,Боксер,2006,с.14]).
 ш1.1
   Говорят, что  _ 1функция . 0  1f 0(n)  _ 1принадлежит множеству . 0  7w 0( 1g 0(n)), что за-
писывается как
 ш1.0

   f(n) 7еw 0(g(n))

 ш1.1
и обозначается f(n)= 7w 0(g(n)), если  1для любой 0 константы C>0 существу-
ет  целое  число   n 40 0>0   такое,  что  для  всех  n 7. 0n 40 0  выполняется
f(n)>C 77 0g(n), т.е.  если для всех значений n 7. 0n 40 0 функция f(n)  _ 1ограни-
 _ 1чена строго снизу . 0 некоторой константой, умноженной на g(n).

 ш1.2
    2Определение 0  24 0'.
 ш1.0

    4┌ 0─────────────────────────────────────────── 4┐
   │                           4┌ 0                4┐ 0│
   │f 7еw 0(g)  756 0 ( 7А 0c>0) 7Э 0x 40 0( 7А 0x 7. 0x 40 0)││f(x)│ 7. 0c 77 0│g(x)│││.
   │                           4└ 0                4┘ 0│
    4└ 0─────────────────────────────────────────── 4┘

 ш1.2
                          25. 0  7Q 3-обозначение
    2Определение 0  25 0 [Левитин,2006,с.90].
 ш1.1
   Говорят, что  _ 1функция . 0 f(n)  _ 1принадлежит множеству . 0  7Q 0(g(n)), что за-
писывается как
 ш1.0

   f(n) 7еQ 0(g(n))

 ш1.1
и обозначается f(n)= 7Q 0(g(n)), если  1существуют 0 константы C 41 0>0, C 42 0>0 и
целое число n 40 0>0 такое, что для всех n 7. 0n 40 0 выполняется
 ш1.0

   C 41 77 0g(n)  7, 0 f(n)  7, 0 C 42 77 0g(n),

 ш1.1
т.е. если  для  всех  значений  n 7. 0n 40 0  функция f(n)  _ 1ограничена снизу
функцией C 41 77 0g(n), а  _ 1сверху . 0 - функцией C 42 77 0g(n).

 ш1.2
   Классу  7Q 0(g)  принадлежат  все  функции, растущие   1с той же  0  1ско-
 1ростью, 0  1что и функция 0 g, т.е. этот класс представляет собой пересе-
чение множеств (классов)  7Q 0(g)= 7O 0(g) 7UW 0(g).
    2Определение 0  25 0'.
 ш1.0

    2(1) 0 f 7еQ 0(g)  756 0 f 7еO 0(g) & f 7еW 0(g).

        4┌ 0───────────────────────────────────────────────────────── 4┐
       │                      4┌ 0                                   4┐ 0│
    2(2) 0 │( 7Э 0C 41 0>0)( 7Э 0C 42 0>0)( 7Э 0n 40 0>0)│n 7. 0n 40 0  76 0 C 41 77 0g(n) 7, 0f(n) & f(n) 7, 0C 42 77 0g(n)││.
       │                      4└ 0                                   4┘ 0│
        4└ 0───────────────────────────────────────────────────────── 4┘

 ш1.2
   При сравнении алгоритмов чаще всего интересны  такие  алгоритмы,
которые  решают задачу   _ 1быстрее, чем уже изученные . 0.  Поэтому,  если
найденный алгоритм относится к классу  7Q 0,  то он,  вообще говоря, не
очень интересен.
    3Замечание 0.
 ш1.1
   Разработчики алгоритмов  часто  используют  обозначение 7 O 0,  даже
когда обозначение   7Q 0 будет более точным;  это обусловлено тем,  что
разработчики алгоритмов обычно сосредотачиваются на верхних  грани-
цах - гарантиях того, как долго алгоритмы могут выполняться.
   Мы будем часто следовать этой традиции.

 ш1.2
    2Определение 0.
 ш1.1
    _ 1Асимптотическими обозначениями . 0 ( _ 1формами записи . 0) называются имена
множеств 7 O 0,  7o 0,  7W 0,  7w 0,  7Q 0.

 ш1.2
   Таким образом, асимптотические обозначения используются как  _ 1инс-
 _ 1трумент анализа . 0 скорости роста исследуемой функции.
                     26. 0  3Свойства асимптотических
                             3обозначений
    2Теорема 0 ( 1лёгкая 0).
 ш1.0

   f 7еO 0(g)  756 0 -f 7еO 0(g)  756 0 f 7еO 0(-g)  756 0 -f 7еO 0(-g).

 ш1.2
    2Доказательство 0.  1Упражняйтесь 0.
    2Теорема 0 [Миллер,Боксер,2006,с.16-17].
 ш1.1
   Пусть f и g - положительные функции n. Тогда
 ш1.0

    2(1) 7  0f(n)= 7O 0(g(n)) <=> g(n)= 7W 0(f(n));

    2(2) 7  0f(n)= 7Q 0(g(n)) <=> g(n)= 7Q 0(f(n));

    2(3) 7  0f(n)= 7Q 0(g(n)) <=> f(n)= 7O 0(g(n))&f(n)= 7W 0(g(n));

    2(4) 7  0f(n)= 7o 0(g(n)) <=> g(n)= 7w 0(f(n));

    2(5) 7  0f(n)= 7o 0(g(n)) <=>  1lim 0 f(n)/g(n)=0;
                        n 76$

    2(6) 7  0f(n)= 7w 0(g(n)) <=>  1lim 0 f(n)/g(n)= 7$ 0;
                        n 76$

    2(7) 7  0f(n)= 7o 0(g(n)) => f(n)= 7O 0(g(n));

    2(8) 7  0f(n)= 7w 0(g(n)) => f(n)= 7W 0(g(n));

 ш1.1
    2(9) 7  0f(n) ограничена сверху и  снизу  положительными  константами
 1тогда и только тогда, когда 0 f(n)= 7Q 0(1).

 ш1.2
    2Доказательство 0.  1Упражняйтесь 0.
    2Теорема 0 (по [Левитин,2006,с.91]).
 ш1.0

    2(1) 0 f 41 0(n) 7еO 0(g 41 0(n)) & f 42 0(n) 7еO 0(g 42 0(n)) =>
                                => f 41 0(n)+f 42 0(n) 7еO 0( 1max 0{g 41 0(n),g 42 0(n)});

    2(2) 0 f 41 0(n) 7еW 0(g 41 0(n)) & f 42 0(n) 7еW 0(g 42 0(n)) =>
                                => f 41 0(n)+f 42 0(n) 7еW 0( 1max 0{g 41 0(n),g 42 0(n)});

    2(3) 0 f 41 0(n) 7еQ 0(g 41 0(n)) & f 42 0(n) 7еQ 0(g 42 0(n)) =>
                                => f 41 0(n)+f 42 0(n) 7еQ 0( 1max 0{g 41 0(n),g 42 0(n)}).

 ш1.2
    2Доказательство 0.
    2(1) 0 Пусть a 41 0, b 41 0, a 42 0, b 42 0 - произвольные вещественные числа.
   Тогда
 ш1.0

   a 41 7, 0b 41 0 & a 42 7, 0b 42 0 => a 41 0+a 42 0  7, 0 b 41 0+b 42 0 => a 41 0+a 42 0  7, 0 2 77 1max 0{b 41 0,b 42 0}.

 ш1.2
   Итак, общая эффективность алгоритма, состоящего из двух исполня-
емых частей зависит от части, которая имеет наибольший порядок рос-
та, т.е. от наименее эффективной части.
    1Теорема доказана 0.
                     27. 3 Метод сравнения порядков
                         3роста двух функций
   Существует удобный метод сравнения порядков роста двух  заданных
функций,  основанный на вычислении предела их отношения (если,  ко-
нечно, этот предел  _ 1существует . 0!).
    2Теорема 0 (по [Левитин,2006,с.93; Миллер,Боксер,2006,с.17]).
 ш1.1
   Если  1существует 0 конечный или бесконечный предел
 ш1.0

       f(n)
    1lim 0 ──── =L,
   n 76$ 0 g(n)

то имеют место следующие утверждения:

   (1) если L=0,  то f(n) 7еO 0(g(n) и f(n) 7ЕQ 0(g(n));

   (2) если L 7е ═R 5+ 0, то f(n) 7еQ 0(g(n)) и g(n) 7еQ 0(f(n));

   (3) если L= 7$ 0,  то f(n) 7еW 0(g(n)) и f(n) 7ЕQ 0(g(n)).

 ш1.1
   Если предел  1не существует 0, то этот метод  1не позволяет 0 определить
асимптотическую оценку отношения между f(n) и g(n).

 ш1.2
    2Доказательство 0.  1Упражняйтесь 0.
   Методы, основанные на вычислении пределов, зачастую более удобны
для  1анализа алгоритмов 0,  чем описанные  выше  методы, основанные на
определении множеств  7O 0,  7W 0,  7Q 0.
   Дело в  том,  что  в первом случае можно воспользоваться преиму-
ществами математического аппарата, специально созданного для вычис-
ления пределов (в частности,  _ 1правилом Лопиталя . 0).
                        3Шкала роста числовых
                        3последовательностей
   Рассмотрим несколько числовых последовательностей, которые явля-
ются дискретными аналогами  1элементарных функций 0.
    2Теорема 0 (по [Григорьев,2004,с.34]) ( 1о шкале роста 0).
 ш1.1
   Имеет место следующая  1шкала роста  числовых  последовательностей
(шкала дополнена последовательностью {n!}):
 ш1.0
                                              4n
    _ 1ln 0( 1ln 0(n)) .;  _ 1ln 7Ф 0n .,  7a 0>0;  _n 5k . 0, k>0;  _a 5n . 0, a>1;  _a 5b 0  ., a>1, b>1;  _n! ..

 ш1.1
   При этом f 4n 0= 7o 0(g 4n 0), n 76$ 0, если последовательность {f 4n 0} предшеству-
ет последовательности {g 4n 0}.

 ш1.2
    2Доказательство 0.  1Упражняйтесь 0.
   С помощью  шкалы  роста  для функций и последовательностей можно
получить ряд  _ 1полезных неравенств . 0 для числовых последовательностей.
    2Теорема 0 (по [Григорьев,2004,с.39]) ( 1без доказательства 0).
 ш1.1
    2(1) 0 Пусть 7 a 0 - произвольное число, 7 b 0>0.
   Тогда найдётся такое натуральное число N (зависящее от  7a 0  и   7b 0),
что для всех n>N справедливо неравенство
 ш1.0

    1ln 7Ф 0n     1
   ──── < ──────.
   n 51+ 7И 0   n 51+ 7И 5/2

 ш1.1
    2(2) 0 Пусть 7 a 0 - произвольное число, 7 b 0>0.
   Тогда найдётся такое натуральное число N( 7a 0, 7b 0),  что для всех n>N
справедливо неравенство
 ш1.0

    1ln 7Ф 0n     1
   ──── < ──────.
   n 51- 7И 0   n 51- 7И 5/2

 ш1.1
    2(3) 0 Пусть k - произвольное число. Тогда для всех n>N(k)
 ш1.0

           1
   n 5k 77 0e 5-n 0< ──.
           n 52
 ш1.2

                    3Основные классы эффективности
                             3алгоритмов

 ш1.0
              1Курица - не птица, логарифм - не бесконечность.
                                                          1Л.Д.Ландау

              1Мне нравится "писать код с расчётом на эффективность" 0:
              1знать сложность своих алгоритмов, и если писать что-то
              1хуже, чем 7 O 0( 1n 77 1log 42 1n 0) 1, то всё время думать, не окажется
              1ли это в будущем серьёзной проблемой. 0
                                                            1С.Марлоу
 ш1.2

   Для оценки алгоритмов существует много критериев. Чаще всего нас
будет интересовать  порядок  роста  необходимых  для решения задачи
времени и ёмкости памяти при увеличении входных данных.
   Свяжем с каждой конкретной задачей некоторое  число,  называемое
её  _ 1размером . 0, которое выражало бы меру количества входных данных.
    2Определение 0.
 ш1.1
    _ 1Размером задачи . 0 является количественная  характеристика  входных
данных.

 ш1.2
   Приведём несколько примеров:
 ш1.1
   (1) для задач поиска и сортировки массивов под термином  " 1размер
 1задачи 0" понимается количество элементов массива;
   (2)  1размером  задачи умножения матриц 0 может быть наибольший раз-
мер матриц-сомножителей;
   (3)  1размером задачи о графах 0 может быть количество рёбер графа.

 ш1.2
   При анализе алгоритма определяют зависимость количества выполня-
емых операций (единиц времени) от  1размера решаемой задачи 0.
    2Определение 0.
 ш1.1
    2(1) 0  _ 1Временной сложностью алгоритма . 0 называется время, затрачивае-
мое алгоритмом, как функция  1размера задачи 0.
    2(2) 0  _ 1Асимптотической  временной  сложностью  алгоритма . 0 называется
поведение временной сложности алгоритма в  пределе  при  увеличении
 1размера задачи 0.
    2(3) 0  _ 1Ёмкостной сложностью алгоритма . 0 называется объём памяти, тре-
буемой для выполнения алгоритма, как функция 1 размера задачи 0.
    2(4) 0  _ 1Асимптотической ёмкостной  сложностью  алгоритма . 0  называется
поведение ёмкостной  сложности  алгоритма  в пределе при увеличении
 1размера задачи 0.

 ш1.2
    2Определение 0 [Каррано,Причард,2003,с.413].
 ш1.1
    2(1)  0Будем говорить, что  _ 1алгоритм . A  _имеет порядок . 0 f(n) (и обозна-
чать этот факт  7O 0(f(n))),  если существуют константы k и  n 40 0  такие,
что при решении задачи, имеющей размер n 7. 0n 40 0, алгоритм A выполняется
не более, чем за k 77 0f(n) единиц времени.
    2(2) 0  _ 1Сложностью алгоритма . 0 будем называть функцию y=f(n).

 ш1.2
   Условие n 7. 0n 40 0 формализует интуитивное понятие " 1большая задача 0".
   Требование n 7. 0n 40 0 в определении  величины   7O 0(f(n))  означает,  что
оценка времени будет корректной лишь для достаточно больших задач.
   Иными словами, если задача имеет относительно небольшие размеры,
то оценка времени её решения будет слишком заниженной.
   Временную эффективность значительного количества алгоритмов мож-
но отнести к следующим классам  1по возрастанию 0 порядка их роста.
 ш1.0

    21. 0  7Q 0(1) ( _ 1постоянное время . 0).

 ш1.2
   Константа 1  означает,  что время выполнения алгоритма постоянно
и  1не зависит от размера задачи 0 (тем не менее,  обычно при бесконеч-
ном  увеличении  размера  входных данных время выполнения алгоритма
также стремится к бесконечности).
   В этот класс попадает очень небольшое количество алгоритмов.
 ш1.0

    22. 1  7Q 0( 1log 0( 1log 0(n))).

 ш1.2
   Одним из естественных примеров возникновения подобной оценки бу-
дет являться двоичный поиск в отсортированном  массиве,  содержащем
 1log 0(n) элементов.
 ш1.0

    23. 1  7Q 0( 1log 0(n)) ( _ 1логарифмическое время . 0).

 ш1.2
   Основание логарифма не влияет на  сложность  алгоритма,  поэтому
 1основание алгоритма можно не указывать 0.
   Если алгоритм имеет порядок  7O 0( 1log 42 0n),  то он называется  _ 1логариф-
 _ 1мическим  алгоритмом . 0.  Время  выполнения  такого алгоритма медленно
возрастает с  увеличением  размера задачи (так,  если размер задачи
возводится в квадрат, то сложность увеличивается только в два раза).
   Обычно такая зависимость появляется в результате сокращения раз-
мера задачи  1в заданное число раз 0 на каждом шаге итерации алгоритма.
Логарифмическая временная сложность проявляется,  например, в таких
алгоритмах, как  1двоичный поиск 0.
 ш1.0

        4┌ 0                   4┐
    24. 1  7Q 0│ 1log 0(n)/ 1log 0( 1log 0(n))│.
        4└ 0                   4┘

 ш1.2
   Эта функция возрастает немного медленнее,  чем  функция   1log 0(n),
т.к.  она  содержит в знаменателе ещё более медленно растущую функ-
цию. Чтобы понять,  как возникла эта функция,  рассмотрим  корневое
дерево с количеством потомков d, имеющее n листьев. Высота двоичных
корневых деревьев,  т.е. деревьев, у которых d=2, определяется фор-
мулой h= 1log 0(n) (т.к. n=2 5h 0).
   Теперь рассмотрим высоту дерева, когда количество потомков равно
d= 1log 0(n). Тогда высота определяется формулой
 ш1.0

         1log 0(n)
   h= ───────────
       1log 0( 1log 0(n))

    25. 1  7Q 0( 1log 5k 0n), k 7е ═N 0\{0} ( _ 1полилогарифмическое время . 0).

 ш1.2
   Рассмотрим, в частности, случай k=2. Такая функция может возник-
нуть, если мы хотим подсчитать просмотренные биты в процессе бинар-
ного поиска в множестве из n элементов,  каждый из которых является
целым числом в диапазоне от 1 до n.
   Для представления каждого из этих целых чисел требуется
 ш1.0

    1log 0(n 52 0)=2 77 1log 0(n) битов,

 ш1.2
а поскольку количество чисел в множестве поиска  равно 1  log 0(n),  то
общее количество битов будет равно 1  02 77 1log 52 0(n).
   Функция " 1логарифм в квадрате 0" обычно  возникает  при  разработке
сложных "гнездовых" структур,  где каждый узел,  скажем, в двоичном
дереве представляет другую структуру данных,  возможно, упорядочен-
ную по другому ключу.
 ш1.0

    26. 7 o 0( 1log 0(n)) ( _ 1подлогарифмическое время . 0).

    27. 1  7Q 0(n) ( _ 1линейное время . 0).

 ш1.2
   Если алгоритм имеет порядок  7O 0(n),  то он называется  _ 1линейным ал-
 _ 1горитмом . 0.  Время  выполнения такого алгоритма прямо пропорционально
размеру задачи.  Если размер задачи возводится в квадрат,  то объём
времени увеличивается точно так же.
   К этому классу относятся алгоритмы, выполняющие просмотр  линей-
ного списка, состоящего из n элементов:
 ш1.1
   (1) алгоритм определения наибольшего (наименьшего) элемента мас-
сива;
   (2) алгоритм последовательного поиска элемента;
   (3) алгоритм сортировки подсчётом распределения.

 ш1.2
    _ 1Быстрым алгоритмом . 0 называется алгоритм,  для которого с увеличе-
нием размера входных данных наихудшее  время  выполнения  алгоритма
"растёт медленно".
   Что мы имеем в виду,  говоря,  что  время  выполнения  алгоритма
" 1растёт медленно 0"?  Почти  для всех алгоритмов идеалом,  к которому
нужно стремиться, является алгоритм, время выполнения которого пря-
мо пропорционально зависит от размера входных данных.
 ш1.0

    28. 7 o 0(n) ( _ 1подлинейное время . 0).

    29. 0  7Q 0(n 51+b 0), b>0.

 ш1.2
   Здесь b - константа,  которая может быть сколь угодно малой,  но
при этом не равна 0 (выбор наилучшего значения для b предоставляет-
ся программисту).
 ш1.0

    210. 0  7Q 0(n 77 1log 0(n)).

 ш1.2
   Пусть алгоритм имеет сложность  7O 0(n 77 1log 42 0n).  Время выполнения та-
кого алгоритма растёт  1немного  0быстрее, чем у линейного алгоритма.
   Алгоритмы подобной сложности обычно разбивают задачу на подзада-
чи и решают их по отдельности.  К этому классу относятся, например,
следующие  1алгоритмы декомпозиции 0: сортировка слиянием, быстрая сор-
тировка.
 ш1.0

    211. 0  7Q 0(n 52 0) ( _ 1квадратичное время . 0).

 ш1.2
   Время выполнения такого алгоритма быстро возрастает с увеличени-
ем размера задачи, поэтому алгоритмы следует использовать для реше-
ния задач небольшого размера.
   Как правило,  подобная зависимость  характеризует  эффективность
алгоритмов, содержащих два вложенных цикла.
   Квадратичное время требуется для просмотра большинства или  всех
пар элементов в универсальном множестве из n элементов.
   В качестве типичных примеров достаточно назвать:
   (1) многие операции над матрицами размера n 7& 0n;
   (2) классические алгоритмы сортировки массивов ( 1обменами 0,   1вклю-
 1чениями 0,  1выбором 0);
   (3) некоторые алгоритмы динамического программирования.
 ш1.0

    212. 0  7Q 0(n 53 0) ( _ 1кубическое время . 0).

 ш1.2
   Если алгоритм  имеет порядок  7O 0(n 53 0), то  он называется  _ 1кубическим
 _ 1алгоритмом . 0. Алгоритмы, использующие три вложенных цикла, часто ока-
зываются  1кубическими алгоритмами 0. Такие алгоритмы следует применять
лишь для решения небольших задач.
   Кубическое время требуется для просмотра  большинства  или  всех
троек элементов в универсальном множестве из n элементов.
   К этому  классу относятся некоторые алгоритмы линейной алгебры и
некоторые алгоритмы динамического программирования.
 ш1.0

    213. 7 Q 0(f(n)), где f(n) - многочлен ( _ 1полиномиальное время . 0).

    214. 5  7Q 0(2 5n 0) ( _ 1экспоненциальное время . 0).

 ш1.2
   Если алгоритм имеет порядок  7O 0(2 5n 0),  то он называется  _ 1экспоненци-
 _ 1альным  алгоритмом . 0.  С  увеличением размера задачи время выполнения
такого алгоритма обычно резко возрастает,  поэтому на практике  по-
добные алгоритмы применяются редко.
   Эта зависимость типична для  алгоритмов,  выполняющую  обработку
всех  1подмножеств 0 множества, состоящего из n элементов.
 ш1.0

    215. 0  7Q 0(n!) ( _ 1факториальное время . 0).

 ш1.2
   Данная зависимость типична для алгоритмов, выполняющих обработку
всех  1перестановок 0 множества, состоящего из n элементов.
 ш1.0

    216. 0  7Q 0( 7a 0(n)).

 ш1.2
   Здесь  7a 0(n) -  _ 1двухместная функция Аккермана . 0 (указан только первый
аргумент). Достаточно воспринимать эту функцию как технический тер-
мин  для самой быстро возрастающей функции;  так,  значение функции
Аккермана уже при n 7. 04 превосходит любое числовое значение  в  физи-
ческой Вселенной.
    _ 1Полезный совет . 0 (по [Скиена,2011,с.57]).
 ш1.1
   Запомните следующие отношения:
 ш1.0

    4┌ 0───────────────────────────────────────────── 4┐
   │1  ═Б 0  1log 0(n)  ═Б 0 n  ═Б 0 n 77 1log 0(n)  ═Б 0 n 52 0  ═Б 0 n 53 0  ═Б 0 2 5n 0  ═Б 0 n!│,
    4└ 0───────────────────────────────────────────── 4┘

где f(n) ═Б 0g(n), если f(n)= 7o 0(g(n)), т.е.  1lim 0 f(n)/g(n)=0.
                                       n 76$ 0

 ш1.2
    _ 1Выводы . 0 (по [Скиена,2011,с.55-56,57]).
 ш1.1
    21. 0 Хотя  анализ  сложных алгоритмов может порождать экзотические
функции, в большинстве практических алгоритмов применяется лишь  _ 1не-
 _ 1большое . 0 множество функций для оценки временной сложности.
    22. 0 Алгоритмы с линейным  7O 0(n) и логарифмическим  7O 0( 1log 42 0n) временем
выполнения остаются полезными при обработке 1000000 элементов.
   В частности,  алгоритм 7 O 0( 1log 42 0n) без труда обрабатывает любое во-
образимое количество элементов.
    23. 0 Алгоритмы с квадратичным временем выполнения 7 O 0(n 52 0) применяют-
ся при n 7, 010000,  после чего их  производительность  начинает  резко
ухудшаться. Эти алгоритмы, скорее всего будут бесполезны для значе-
ний n>1000000.
    24. 0 Алгоритмы с временем выполнения  7O 0(2 5n 0) становятся непрактичны-
ми для значений n>40.
    25. 0 Любой  алгоритм с временем выполнения  7O 0(n!) становится беспо-
лезным для значений n 7. 020.

 ш1.2
   Приведём  _ 1две таблицы . 0 [Поднебесова,2008,с.30]:
 ш1.1
   (1) первая показывает скорость роста времени выполнения алгорит-
мов различной сложности для решения одной и той  же  задачи,  но  с
различным количеством входных переменных;
   (2) вторая показывает,  как увеличиваются размеры наибольшей за-
дачи, разрешимой за один час,  при увеличении быстродействия компь-
ютера в 100 и в 1000 раз.
   Отметим, что для двух  последних  алгоритмов  увеличение  объёма
входных данных практически не произошло.

 ш1.2
   Предположим теперь,  что вместо увеличения быстродействия компь-
ютера мы используем более эффективный алгоритм.
   Тогда, например,  при размере задачи n=40 замена алгоритма с эф-
фективностью 7 O 0(n 52 0) даёт экономию времени в 40 раз,  а замена на ал-
горитм с эффективностью  7O 0(n) - в 1600 раз,  в то время как увеличе-
ние быстродействия  компьютера в 100 и 1000 раз и использование ис-
ходного алгоритма даёт выигрыш только в 4.64 и 10 раз соответствен-
но.
 ш1.0

                  1Сложность и труднорешаемые задачи
   ┌─────────╥─────────────────────────────────────────────────┐
   │ 3Функция   0║                      3Размер n 0                    │
   │ 3временной 0╟───────┬───────┬───────┬───────┬───────┬─────────┤
   │ 3сложности 0║  10   │   20  │   30  │   40  │   50  │   60    │
   ╞═════════╬═══════╪═══════╪═══════╪═══════╪═══════╪═════════╡
   │   n     ║0.00001│0.00002│0.00003│0.00004│0.00005│0.00006  │
   │         ║  с    │  с    │  с    │  с    │  с    │  с      │
   ├─────────╫───────┼───────┼───────┼───────┼───────┼─────────┤
   │   n 52 0    ║0.0001 │0.0004 │0.0009 │0.0016 │0.0025 │0.0036 с │
   │         ║  с    │  с    │  с    │  с    │  с    │         │
   ├─────────╫───────┼───────┼───────┼───────┼───────┼─────────┤
   │   n 53 0    ║0.001 с│0.008 с│0.027 с│0.064 с│0.125 с│0.216 с  │
   ├─────────╫───────┼───────┼───────┼───────┼───────┼─────────┤
   │   n 55 0    ║0.1 с  │3.2 с  │24.3 с │1.7 мин│5.2 мин│13.0 мин │
   ├─────────╫───────┼───────┼───────┼───────┼───────┼─────────┤
   │   2 5n 0    ║0.001 с│1.0 с  │17.9 с │12.7 дн│35.7   │36600 лет│
   │         ║       │       │       │       │ лет   │         │
   ├─────────╫───────┼───────┼───────┼───────┼───────┼─────────┤
   │   3 5n 0    ║0.059 с│58 мин │6.5 лет│3855000│2 77 010 510 0 │1.3 77 010 515 0 │
   │         ║       │       │       │    лет│    лет│      лет│
   └─────────╨───────┴───────┴───────┴───────┴───────┴─────────┘

          1Размеры наибольшей задачи, разрешимой за один час
   ┌─────────╥──────────────┬───────────────┬────────────────┐
   │ 3Функция 0  ║ 3На современных 0│ 3На компьютерах 0 │ 3На компьютерах 0  │
   │ 3временной 0║ 3компьютерах 0   │ 3в 100 раз более 0│ 3в 1000 раз более 0│
   │ 3сложности 0║              │ 3быстрых 0        │ 3быстрых 0         │
   ╞═════════╬══════════════╪═══════════════╪════════════════╡
   │    n    ║      N 41 0      │    100 77 0N 41 0     │    1000 77 0N 41 0     │
   ├─────────╫──────────────┼───────────────┼────────────────┤
   │    n 52 0   ║      N 42 0      │    10 77 0N 42 0      │    31.6 77 0N 42 0     │
   ├─────────╫──────────────┼───────────────┼────────────────┤
   │    n 53 0   ║      N 43 0      │    4.64 77 0N 43 0    │    10 77 0N 43 0       │
   ├─────────╫──────────────┼───────────────┼────────────────┤
   │    n 55 0   ║      N 44 0      │    2.5 77 0N 44 0     │    3.98 77 0N 44 0     │
   ├─────────╫──────────────┼───────────────┼────────────────┤
   │    2 5n 0   ║      N 45 0      │    N 45 0+6.64    │    N 45 0+9.97     │
   ├─────────╫──────────────┼───────────────┼────────────────┤
   │    3 5n 0   ║      N 46 0      │    N 46 0+4.19    │    N 46 0+6.29     │
   └─────────╨──────────────┴───────────────┴────────────────┘

 ш1.2
   Эти простые вычисления показывают, насколько важно иметь для ре-
шения поставленных задач максимально эффективные алгоритмы.
   При этом использование более быстрого алгоритма намного предпоч-
тительнее простого технического усовершенствования компьютеров.
    3Замечание 0 (по [Крэндалл,Померанс,2011,с.17]).
 ш1.1
    1Р.Крэндалл 0 (1997)  ответил  на  вопрос:  "Сколько вычислительных
операций (логическое "И", сложение, умножение и т.д.) было произве-
дено всеми компьютерами за всё время их существования?" так:  к ру-
бежу XX и XXI веков примерно один  _ 1моль операций . 0 (т.е. число Авогад-
ро 6 77 010 523 0  из химии) было выполнено всеми компьютерами за всю исто-
рию их существования.
 ш1.2

                2ПРИМЕРЫ РЕШЕНИЯ НЕКОТОРЫХ УПРАЖНЕНИЙ

 ш1.0
                               1Вечность 0?  1Единица исчисления времени.
                                          1Е.Лец. Непричёсанные мысли
 ш1.2

    2Пример 1 0. Вычислите предел последовательности {n 51/n 0}, т.е.
 ш1.0

    1lim 0 n 51/n 0.
   n─ 76$

 ш1.2
    _ 1Решение . 0. Воспользуемся несколькими способами вычисления:
   (1) определением предела последовательности:
 ш1.0

   ( 7Аe 0>0)( 7Э 0N( 7e 0)>0)( 7А 0n>N)│n 51/n 0-1│< 7e 0.

 ш1.2
   Отметим, что мы предположили, что предел равен 1. Теперь для за-
данного  7e 0>0 определим N, воспользовавшись  1биномом Ньютона 0:
 ш1.0

                                N(N+1)         N(N+1)
   N 51/N 0=1+ 7e 0 => N = (1+ 7e 0) 5N 0=1+ 7e 0N+ ────── 77e 52 0+ 7777 0> ────── 77e 52 0 =>
                                  2              2

                  N+1             2
            => 1> ─── 77e 52 0 => N( 7e 0)= ── -1.
                   2               7e 52
 ш1.2
   (2) сведением к пределу непрерывной функции f(x)=x 51/x 0 при x─ 76 0+ 7$ 0,
который вычислим с помощью раскрытия  неопределённости  по   1правилу
 1Лопиталя 0:
 ш1.0

             [ 7$ 50 0]                  4┌ 0      1ln 0(x) 4┐ 0     4┌ 0     1 4┐
    1lim 0  x 51/x 0  =   1lim  e 5ln(x)/x 0= 1exp 0│ 1lim  0 ─────│= 1exp 0│ 1lim  0 ─│= 1e 50 0=1 =>
   x─ 76$ 0          x─ 76$ 0              4└ 0x─ 76$ 0   x   4┘ 0     4└ 0x─ 76$ 0 x 4┘

              =>  1lim 0  n 51/n 0=1.
                 n─ 76$

 ш1.2
   (3) системой компьютерной алгебры Maple 12:
 ш1.0

   > limit (x^(1.0/x),x=infinity);
                                 1

 ш1.2
   (4) наконец, можно написать код на любом языке программирования,
вычисляющий  _ 1приближённое . 0  (!) значение предела (обратим внимание на
 1изменение 0 постановки задачи!).
    3Замечание 0 [Кельберт,Сухов,2010,с.56].
 ш1.1
   А.Н.Колмогоров в юности всерьёз занимался историей и в девятнад-
цать лет завершил работу, посвящённую принципам распределения и на-
логообложения пахотной земли Новгорода в XV и XVI веках. Новгород -
это древний русский город,  княжество и республика в разные периоды
существования,  полностью или частично независимый, - был присоеди-
нён Москвой в 1478 г.
   В своей работе А.Н.Колмогоров использовал  математическую  аргу-
ментацию, чтобы ответить на следующий вопрос. Верно ли, что:
   (а) вначале облагалась налогом деревня,  а затем налог распреде-
лялся между домовладельцами, или
   (б) наоборот,  вначале облагались налогом домовладельцы, а потом
платился общий налог с деревни?
   Источником информации были древние писцовые книги -  кадастры  и
другие официальные  рукописи  того времени.  Поскольку общая сумма,
которую собирали с деревни,  была всегда целым числом  (меняющихся)
денежных единиц, А.Н.Колмогоров доказал, что использовалось правило
(б). Он доложил о своём результате на семинаре по  истории  в  Мос-
ковском университете в 1922 г. Тем не менее, руководитель семинара,
известный профессор (позже в честь его была названа одна московская
улица), сказал, что результат молодого коллеги не может быть принят
как окончательный потому,  что "в истории каждое утверждение должно
быть подкреплено  _ 1несколькими доказательствами . 0".
   После этого А.Н.Колмогоров решил заняться дисциплиной, в которой
"для правильного  утверждения  достаточно  одного  доказательства",
т.е. математикой.
 ш1.2

    2Пример 0  22 0 [Левитин,2006,с.89,90].
   Докажите следующие утверждения:
 ш1.0

   (а) 100n+5 7еO 0(n 52 0);  (в) n(n-1)/2 7еQ 0(n 52 0);  (д) 1+2 5p 0+ 7777 0+n 5p 7еO 0(n 5p+1 0).

   (б) n 53 7еW 0(n 52 0);      (г) 5+ 1sin 0(n) 7еQ 0(1);

 ш1.2
    _ 1Решение . 0.
    2(а) 0 Для всех n 7. 05 справедливо следующее:
 ш1.0

   100n+5  7, 0 100n+n=101n  7, 0 101n 52 0.

 ш1.2
   Таким образом, можно положить C=101, n 40 0=5;
    2(б) 0 для  всех n 7. 00 справедливо n 53 7. 0n 52 0,  поэтому для данного случая
можно положить C=1 и n 40 0=0;
    2(в) 0 вначале  докажем  правую  часть неравенства (т.е.  определим
верхнюю границу). Для всех n 7. 00 справедливо следующее:
 ш1.0

   n(n-1)/2=n 52 0/2-n/2  7, 0 n 52 0/2.

 ш1.2
   Затем докажем  левую  часть  неравенства (т.е.  определим нижнюю
границу). Для всех n 7. 02 справедливо следующее:
 ш1.0

   n(n-1)/2=n 52 0/2-n/2  7. 0 n 52 0/2-n/2 77 0n/2=n 52 0/4.

 ш1.2
   Итак, можно положить C 41 0= 51 0/ 44 0, C 42 0= 51 0/ 42 0, n 40 0=2;
    2(г) 0 Для всех натуральных n справедливо
 ш1.0

   4 77 01 7, 05+ 1sin 0(n) 7, 06 77 01.

 ш1.2
   Итак, можно положить C 41 0=4, C 42 0=6, n 40 0=0.
   Заметим также, что 5+ 1sin 0(n) 7еO 0(1) и 5+ 1sin 0(n) 7еW 0(1), но лучше запи-
сать 5+ 1sin 0(n) 7еQ 0(1), т.к.  1использование асимптотического обозначения
 7Q 0  1содержит больше информации, чем 0  1обозначения  7O 0  _ 1и . 0  7W 0;
    2(д) 0 для всех натуральных n справедливо
 ш1.0

   1+2 5p 0+ 7777 0+n 5p 7, 0n 5p 0+n 5p 0+ 7777 0+n 5p 0=n 5p+1 0.

 ш1.2
   Итак, можно положить C=1, n 40 0=0.

    2Пример 0  23 0. Расположите последовательности в порядке  1возрастания 0:
 ш1.0
                                                 41/2
   f 41 0=10 5n 0, f 42 0=n 51/3 0, f 43 0=n 5n 0, f 44 0= 1log 42 0n, f 45 0=2 5(log 42 5n) 0   .

 ш1.2
    _ 1Решение . 0. Построим  новые  функции с помощью логарифмирования за-
данных функций:
 ш1.0
                                                             7|\\\\
   g 41 0=( 1log 42 010) 77 0n, g 42 0=( 51 0/ 43 0) 77 0n, g 43 0=n 77 1log 42 0n, g 44 0= 1log 42 1log 42 0n, g 45 0= 7? 1log 42 0n.

 ш1.2
   Интуиция подсказывает,  что последовательность g 43 0 - самая "быст-
рая", последовательности g 41 0 и g 42 0 близки по быстродействию, а после-
довательности g 44 0 и g 45 0 ведут себя "загадочным образом".
   Поэтому последовательно вычислим следующие пределы:
 ш1.0

        g 41 0       ( 1log 42 010) 77 0n    1log 42 010
    1lim 0  ── = 1lim 0  ────────── = ────── >1 => g 41 0= 7Q 0(g 42 0);
   n─ 76$ 0 g 42 0  n─ 76$ 0  ( 51 0/ 43 0) 77 0n       51 0/ 43

        g 44 0        1log 42 1log 42 0n         1log 42 1log 42 0x
    1lim 0  ── = 1lim 0  ────────── = 1lim 0  ────────── =
   n─ 76$ 0 g 45 0  n─ 76$ 0 ( 1log 42 0n) 51/2 0  x─ 76$ 0 ( 1log 42 0x) 51/2

            x 77 0( 1log 42 0x) 51/2 0   1   1             1
      = 1lim 0  ──────────── 77 0───── 77 0─ =2 77 1lim 0  ────────── =0 => g 44 0= 7O 0(g 45 0);
       x─ 76$ 0      51 0/ 42 0       1log 42 0x x    x─ 76$ 0 ( 1log 42 0x) 51/2

        g 42 0        ( 51 0/ 43 0) 77 0n          ( 51 0/ 43 0) 77 0x
    1lim 0  ── = 1lim 0  ────────── = 1lim 0  ────────── =
   n─ 76$ 0 g 45 0  n─ 76$ 0 ( 1log 42 0n) 51/2 0  x─ 76$ 0 ( 1log 42 0x) 51/2 0

                ( 51 0/ 43 0) 77 0( 1log 42 0x) 51/2 0   2          7|\\\\
           = 1lim 0 ──────────────── = ─ 77 1lim 0  x 77? 1log 42 0x= 7$ 0.
            x─ 76$ 0  ( 51 0/ 42 0) 77 0( 51 0/ 4x 0)      3 x─ 76$

 ш1.2
   Итак, результатом является кортеж (g 44 0,g 45 0,g 42 0,g 41 0,g 43 0).

                 2ЗАДАЧИ ДЛЯ САМОСТОЯТЕЛЬНОГО РЕШЕНИЯ

 ш1.0
                                 1Запретив себе приказывать детям, мы
                                 1отнимаем 0  1у них 0  1право на детство.
                                                       1Г.К.Честертон
 ш1.2

                       20. 3 Вычисление пределов
                         3последовательностей
    20. 0 (По [Кузнецов,1983,с.21,№20])
   Вычислите пределы числовых последовательностей:
 ш1.0

              2n- 1sin 0(n)                   1e 51/n 0+ 1sin 0(n/(n 52 0+1)) 77 1cos 0(n)
   (1) 1 lim 0  ──────────────;     (2)  1lim 0  ─────────────────────────;
       n─ 76$ 0 n 51/2 0-(n 53 0-7) 51/3 0          n─ 76$ 0         1+ 1cos 0(n)

            (2+n 55 0) 51/4 0-(2n 53 0+3) 51/2 0                 n 52 0-(3n 55 0-7) 51/2
   (3)  1lim 0  ────────────────────;    (5)  1lim 0  ────────────────────;
       n─ 76$ 0  (n+ 1sin 0(n))(7n) 51/2 0           n─ 76$ 0 (n 52 0-n 77 1cos 0(n)+1) 77 0n 51/2

             4┌ 0                   4┌ 0 n   4┐┐ 0           3 77 1sin 0(n)+(n-1) 51/2
   (4)  1lim 0  │ 1sin 0(n 52 0+1) 51/2 77 1arctg 0│────││; (6)  1lim 0  ─────────────────;
       n─ 76$ 0  4└ 0                   4└ 0n 52 0+1 4┘┘ 0      n─ 76$ 0    n+(n+1) 51/2

            (1- 1cos 0(n)) 77 0n 51/3 0                             n
   (7)  1lim 0  ───────────────;            (8)  1lim 0  ────────────────;
       n─ 76$ 0   (2n+1) 51/2 0-1                   n─ 76$ 0 (n 54 0-3) 51/3 0+ 1sin 0(n)

            (n 52 0+ 1cos 0(n)) 51/3 0+(3n 52 0+2) 51/2
   (9)  1lim 0  ─────────────────────────;
       n─ 76$ 0         (n 56 0+1) 51/5

             (n 52 0+3n-1) 51/2 0+(2n 52 0+1) 51/3
   (10)  1lim 0  ───────────────────────.
        n─ 76$ 0       n+2 77 1sin 0(n)

 ш1.2
                    21. 0  3Асимптотическое поведение
                         3последовательностей
    21 4* 2. 0 Проверьте правильность следующих утверждений:
 ш1.0

   (1) n 7еO 0(n 52 0);         (6) n 7еW 0(n 52 0);         (11) an 52 0+bn+c 7еQ 0(n 52 0),
                                                              a>0;
   (2) n(n-1)/2 7еO 0(n 52 0);  (7) n(n-1)/2 7еW 0(n 52 0);  (12) n 52 0+ 1sin 0(n) 7еQ 0(n 52 0);

   (3) n 53 7ЕO 0(n 52 0);        (8) 100n+5 7ЕW 0(n 52 0);    (13) n 52 0+ 1ln 0(n) 7еQ 0(n 52 0);

   (4) 0.00001n 53 7ЕO 0(n 52 0); (9) 0.00001n 53 7ЕW 0(n 52 0); (14)  1log 4b 0n 7еQ 0( 1log 4a 0n),
                                                          a>1, b>1.
   (5) n 54 0+n+1 7ЕO 0(n 52 0);    (10) n 54 0+n+1 7ЕW 0(n 52 0);

 ш1.2
    22. 0 (По [Левитин,2006,с.96])
   Для каждой из приведённых ниже функций укажите класс  7Q 0(g(n)),  к
которому относится  функция.  При  ответе  используйте  максимально
простую функцию g(n).
 ш1.0

   (а) (n 52 0+1) 510 0;    (в) 2 77 0n 77 1ln 0(n+2) 52 0+(n+2) 52 77 1ln 0(n/2);
         7|\\\\\\\\
   (б)  7? 010n 52 0+7n+3;  (г) 2 5n+1 0+3 5n-1 0.

 ш1.2
    23. 0 [Скиена,2011,с.77]
   Для каждой из следующих пар  функций  f(n)  и  g(n)  определите,
справедливы ли утверждения f(n)= 7O 0(g(n)) и(или) g(n)= 7O 0(f(n)):
 ш1.0

  (а) f(n)=(n 52 0-n)/2, g(n)=6 77 0n;   (г) f(n)=n+ 1log 0(n), g(n)=n 51/2 0;

  (б) f(n)=n+2 77 0n 51/2 0, g(n)=n 52 0;    (д) f(n)=2 77 1log 52 0n, g(n)=1+ 1log 0(n);

  (в) f(n)=n 1log 0(n), g(n)=n 53/2 0/2; (е) f(n)=4n 1log 0(n)+n, g(n)=(n 52 0-n)/2.

 ш1.2
    24.  0[Скиена,2011,с.78]
   Верно или неверно?
 ш1.0

   (а) 2n 52 0+1= 7O 0(n 52 0);             (д) 3n 52 0+n 51/2 0= 7O 0(n 52 0);

   (б) n 51/2 0= 7O 0( 1log 0(n));          (е) n 51/2 77 1log 0(n)= 7O 0(n);

   (в)  1log 0(n)= 7O 0(n 51/2 0);          (ж)  1log 0(n)= 7O 0(n 5-1/2 0).

   (г) n 52 0(1+n 51/2 0)= 7O 0(n 52 1log 0(n));

 ш1.2
    25. 0 [Скиена,2011,с.79]
   Определите, верны ли следующие утверждения:
 ш1.0

   (а) 3 5n 0= 7O 0(2 5n 0);            (в) 3 5n 0= 7W 0(2 5n 0);

   (б)  1log 0(3 5n 0)= 7O 0( 1log 0(2 5n 0));  (г)  1log 0(3 5n 0)= 7W 0( 1log 0(2 5n 0)).

 ш1.2
    26 4* 2. 0 Сравните 5  0при n 76$ 0 функции:
 ш1.0

   (1) f(n)=(2+ 51 0/ 4n 0) 5n 0, g(n)=2 5n 0; (2) f(n)=(2+1/n 51/2 0) 5n 0, g(n)=2 5n 0.

 ш1.2
    27. 0 [Рафгарден,2019,с.67-73]
   Путь T(n)= 51 0/ 42 77 0n 52 0+3 77 0n.  Какое из следующих высказываний  является
истинным (может быть более одного правильного ответа):
 ш1.0

   (а) T(n)= 7O 0; (б) T(n)= 7W 0(n); (в) T(n)= 7Q 0(n 52 0); (г) T(n)= 7O 0(n 53 0)?

 ш1.2
                       22. 0  3Шкала роста числовых
                         3последовательностей
    21. 0 [Левитин,2006,с.97]
   Расположите перечисленные ниже функции в соответствии с  их  по-
рядком роста (от самого меньшего к самому большему):
 ш1.0

   (n-2)!, 5 77 1ln 0(n+100) 510 0, 2 52n 0, 0.001 77 0n 54 0+3 77 0n 53 0+1,  1ln 52 0n, n 51/3 0, 3 5n 0.

 ш1.2
    22. 0 [Борзунов,Кургалин,2016,с.383,№11.23]
   Расположите функции
 ш1.0
      4n 0            42 0     4n-1 0     4n        log n+1
   2 52 -1 0, 2 52n 0, 2 5n 0 , 2 52 0   , 2 52 -1/n 0, 2 52   2

 ш1.2
в порядке увеличения скорости их асимптотического роста.
   Выделите группы функций, растущих с одинаковой скоростью.
    23. 0 [Борзунов,Кургалин,2016,с.383,№11.24]
   Расположите функции
 ш1.0

   (2 51/2 0) 5log 42 5n 0, n 52 0, n!, ( 1log 42 0n)!, ( 53 0/ 44 0) 5n 0, n 53 0,  1log 42 52 0n,  1log 42 0(n!),
      4n
   2 52 0 , n 51/log 42 5n 0,  1ln 0( 1ln 0(n)), n 53 77 02 5n 0, n 5log 42 5log 42 5n 0,  1ln 0(n), 2, 2 5log 42 5n 0,
                                          41/2       1/2
   ( 1log 42 0n) 5log 42 5n 0,  1e 5n 0, 4 5log 42 5n 0,  1log 42 51/2 0n, 2 52 0    5(log 42 5n) 0   , n 77 1log 42 0n,

   2 5n 0, n.

 ш1.2
в порядке увеличения скорости их асимптотического роста.
   Выделите группы функций, растущих с одинаковой скоростью.
    24. 0 (По [Скиена,2011,с.78])
   Упорядочите указанные функции в возрастающем порядке.
   Укажите функции одинакового порядка.
 ш1.0

   n, 2 5n 0, n 77 1ln 0(n),  1ln 0(n), n-n 53 0+7n 55 0,  1ln 0(n), n 51/2 0, e 5n 0, n 52 0+ 1ln 0(n),

   n 52 0, 2 5n-1 0,  1lnln 0(n), n 53 0,  1ln 52 0n, n!, n 51+ 7Ь 0, 0< 7m 0<1.

 ш1.2
    25. 0 (По [Скиена,2011,с.78])
   Упорядочите указанные функции в возрастающем порядке.
   Укажите функции одинакового порядка.
 ш1.0

   n 51/2 0, n, 2 5n 0, n 77 1ln 0(n), n-n 53 0+7n 55 0, n 52 0+ 1log 0(n), n 52 0, n 53 0,

    1log 0(n), n 51/3 0+ 1log 0(n),  1ln 52 0n, n!,  1ln 0(n), n/ 1log 0(n),

    1loglog 0(n), ( 51 0/ 43 0) 5n 0, ( 53 0/ 42 0) 5n 0, 6.

 ш1.2
    26. 0 (По [Скиена,2011,с.80])
   Для каждой пары функций (A,B) укажите, какой именно функцией яв-
ляется A для B - функцией 7 O 0,  7o 0,  7W 0,  7w 0,  7Q 0 (для любой из этих пар воз-
можны несколько, один или ни одного варианта).
 ш1.0

   ( 3A 0, 3B 0): (n 5100 0,2 5n 0);  ( 1ln 512 0n,n 51/2 0);  (n 51/2 0,n 5z 0), z= 1cos 0( 7p 0n/8);

          (10 5n 0,100 5n 0); (n 5ln(n) 0, 1ln 5n 0(n)); ( 1ln 0(n!),n 77 1ln 0(n)).

 ш1.2
                      23. 3 Дополнительные задачи
    21. 0 (По [Левитин,2006,с.97])
   Используя определения множеств  7O 0,  7W 0,  7Q 0, докажите или опровергни-
те (с помощью соответствующего контрпримера) утверждения:
 ш1.0

   (а) если f(n) 7еO 0(g(n)), то g(n) 7еW 0(f(n));

   (б)  7W 0( 7a7 0g(n))= 7W 0(g(n)),  7a 0>0;

   (в)  7Q 0(g(n))= 7O 0(g(n)) 7UW 0(g(n));

 ш1.2
   (г) для любых двух неотрицательных функций f(n) и g(n),  опреде-
лённых на множестве неотрицательных целых чисел,  справедливо  либо
утверждение f(n) 7еO 0(g(n)),  либо утверждение f(n) 7еW 0(g(n)),  либо оба
этих утверждения одновременно.
    22. 0 [Миллер,Боксер,2006,с.36]
   Докажите или опровергните каждое из следующих утверждений:
 ш1.0

   (a) f(n)= 7O 0(g(n))=>g(n)= 7o 0(f(n));  (d) f(n)= 7O 0(g(n))=>g(n)= 7W 0(f(n));

   (b) f(n)+g(n)= 7Q 0(max{f(n),g(n)}); (e) f(n)+ 7o 0(f(n))= 7Q 0(f(n)).

   (c) f(n)= 7O 0(f 52 0(n));

 ш1.2
    23. 0 [Григорьев,2004,с.30]
   Найдите  1главный член 0 асимптотического представления при n 76$ 0 сле-
дующих последовательностей:
 ш1.0

   (a) f 4n 0=a/(bn+c), a 7- 00, b 7- 00;   (d) f 4n 0=n 52 0/(2n 55 0+n 53 0-1);
            7|\\\ 0   7|\\\
   (b) f 4n 0= 7? 0n 52 0+1- 7? 0n 52 0-3;          (e) f 4n 0=e 51/n/n 0- 1ch 0(1/n);

   (c) f 4n 0=n 52 1arctg 0(n)/(n 53 0+2);    (f) f 4n 0=n 52 1arctg 0(1/n)/(n 53 0+2).

                       _Ответ .: (a) a/(b 77 0n);  (b) 2/n;     (c)  7p 0/(2n);
                             (d) 1/(2n 53 0); (e) 1/(2n 52 0); (f) 1/n 52 0.

 ш1.2
    24. 0 [Григорьев,2004,с.33]
   Найдите  1главный член 0 асимптотического представления при n 76$ 0 сле-
дующих последовательностей:
 ш1.0

   (a) f 4n 0=(2n+1)/(n 52 0+1)-2/n;  (d) f 4n 0=1- 1cos 51/5 0(1/n);

   (b) f 4n 0=(n+n 51/2 0) 51/2 0;        (e) f 4n 0= 1ch 0(1/n)- 1cos 0(1/n);

   (c) f 4n 0=(n 5-1 0+n 5-1/2 0) 51/2 0;     (f) f 4n 0=(n 51/2 0-(n-1) 51/2 0) 77 1ln 0(1+2/n).

                          _Ответы .: (a) 1/n 52 0;     (b) n 51/2 0; (c) n 5-1/4 0;
                                 (d) 1/(10n 52 0); (e) 1/n 52 0; (f) n 5-2/3 0.

 ш1.2
    25. 0 [Григорьев,2004,с.41]
   Выясните, что больше при достаточно больших значениях n:
 ш1.0

            4100 0                     5k 7|\ 0       5k 7|\\\\
   (a) n 5100 0    или 1.001 5n 0;  (d)  1ln 7? 0n  или   7? 1ln 0(n), k 7е ═N 0;

   (b) 100 5n 0 или n!;         (e) ( 1lnln 0(n)) 5ln(n) 0 или n 52 0;

   (c) n 5n 0 или n!;           (f) ( 1ln 0(n)) 5lnln(n) 0 или n?

 ш1.2
    26. 0 [Григорьев,2004,с.41]
   Найдите, для  каких  значений  a>0  и b при достаточно больших n
справедливы следующие неравенства:
 ш1.0

   (a) a 5bn 0<n 52 0;  (b)  1ln 5b 0n<a 5n 0;  (c)  1ln 5b 0n>a 5n 0?
 ш1.2

    _ 1Домашнее задание . 0:
 ш1.0

   №№  21 41(1-14), 0  44, 7 0;  22 41,3,5 0 ( 119 задач 0).

    _ 1Дополнительные задачи . 0: №№ 2 0 41-10 0.
 ш1.2
