   -- Демонстрация конструирования потенциально бесконечных
   -- списков  (п о т о к о в) по рекуррентному соотношению
   -- первого порядка
   -- ***********************************************
   -- Функция возвращает  п о т о к  по рекуррентному 
   -- соотношению первого порядка
   --
   --  f(x ) = f0, f(x ) = a * x   + b   
   --     0           n         n-1
   --
   --  (a, b - константы)
   ------------------------------------
   f1 a b x0 = x0 : f1 a b (a * x0 + b)
   ------------------------------------
   test1 = take 12 (f1 3 3 2)
   test1' = map (\x -> (7 * 3 ^ (x-1) - 3) `div` 2)
                [1..12]
   --------------------------------------------------------
   -- "Ханойские башни" и "Ханойские башни с ограничениями"
   --------------------------------------------------------
   test1''  = take 12 (f1 2 1 1)
   test1''' = take 12 (f1 3 2 2)

   -- ***************************
   -- Неудачные тестовые примеры:
   ------------------------------
   f2 x0 = x0 : f2 (2 * x0)
   ------------------------
   test2  = take 12 $ f2 2
   test2' = map (2 ^) [1..12]

   ----------------------------------
   f3 x0 k = x0 : f3 (2 * x0 + 4 ^ k)
                     (k + 1)
   -------------------------
   test3  = take 12 (f3 2 2)
   test3' = map (\x -> 2 ^ x * (2 ^ (x + 1) - 3))
                [1..12]

   --------------------------------------
   f4 x0 k = x0 : f4 (2 * x0 + 3 ^ k + 4)
                     (k + 1)
   -------------------------
   test4  = take 12 (f4 1 2)
   test4' = map (\x -> 3 ^ (x + 1) - 2 ^ (x + 1) - 4)
                [1..12]

   -------------------------------------------
   f5 x0 k = x0 : f5 (x0 + k * product [1..k])
                     (k + 1)
   -------------------------
   test5  = take 12 (f5 1 2)
   test5' = map (\x -> product [1..x+1] - 1)
                [1..12]

   -------------------------------------------------------
   f6 x0 k = x0 : f6 (realToFrac ((k + 1) / k) * x0 + 2.0)
                     (k + 1)
   -------------------------
   test6  = take 12 (f6 0 2)
   test6' = map (\x -> 2 * (x + 1) * (garm (x + 1) - 1.5))
                [1..12]
       where garm x = sum (map (1.0 /) [1..x])
